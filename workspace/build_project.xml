<?xml version="1.0" encoding="UTF-8"?>
<project default="test">
	<fail message="FATAL: Do not call this script directly, use build.xml via 'ant -Denv=test -Dprojects=projecta,projectb,projectc'" unless="initialized"/>
	<fail message="FATAL: 'env' property not set. Please provide it the ant command, eg: ant -Dproject=myproject -Denv=dev" unless="env"/>

	<property name="project.dir" value="${basedir}/projects/${project}"/>
	<property name="project.dir.tests" location="${project.dir}/tests" />
	<property name="project.dir.classes" location="${basedir}/build/classes/${project}" />
	<property name="project.dir.deltas" location="${project.dir}/deltas" />
	<property file="${project.dir}/db.properties"/>
	<!-- This will only be used if db.${env}.user/password is not set -->
	<property file="db.properties"/>
	
	<propcop name="db.user" from="db.${env}.user"/>	
	<propcop name="db.password" from="db.${env}.password"/>
	<propcop name="db.type" from="db.${env}.type"/>
	<propcop name="db.driver" from="db.${env}.driver"/>
	<propcop name="db.url" from="db.${env}.url"/>

	<path id="classpath.test.compile">
		<pathelement location="${project.dir}/tests" />
	    <path refid="classpath.test" />
	</path>	
	
	<path id="classpath.test.execute">
		<pathelement location="${project.dir.classes}" />	
		<path refid="classpath.test" />
		<path refid="classpath.runtime" />
		<path refid="classpath.db" />
		<path refid="classpath.jndi" />
	</path>		
	
    <target name="default" depends="clean, update-database">
    	<echo message="Starting project - ${project}"/>
    </target>

    <target name="clean" depends="drop-and-create-database, create-changelog-table"/>

    <target name="create-changelog-table">
        <sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="classpath.dbdeploy" >
        	CREATE TABLE IF NOT EXISTS changelog_${project} (
        	  change_number INTEGER PRIMARY KEY NOT NULL,
        	  complete_dt TIMESTAMP NOT NULL,
        	  applied_by VARCHAR(100) NOT NULL,
        	  description VARCHAR(500) NOT NULL
        	);
        </sql>
    </target>

    <target name="update-database" description="generate a sql upgrade script">
        <!-- if you don't specify an output file, dbdeploy will apply the changes for you
        you may need to specify delimiter and delimitertype for your scripts to be split properly - these
         work the same as in the ant sql task, see http://ant.apache.org/manual/CoreTasks/sql.html
        -->
        <dbdeploy driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" dir="${project.dir.deltas}" changeLogTableName="changelog_${project}"/>
    </target>

    <target name="update-database-and-apply-as-separate-step" description="generate a sql upgrade script">
        <!-- use dbdeploy to generate the change script -->
        <dbdeploy driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" dir="${project.dir.deltas}"
                  outputfile="output.sql" undoOutputfile="undo.sql" dbms="${db.type}"
        />
        <!-- now apply the changescript to the database -->
        <sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="classpath.db">
            <fileset file="output.sql"/>
        </sql>
    </target>

    <target name="dump-tables">
        <sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" print="true" classpathref="classpath.db">
            select * from changelog;
            select * from test;
        </sql>
    </target>

    <target name="drop-and-create-database">
        <delete dir="db"/>
        <mkdir dir="db"/>
    </target>

	<target name="clean-compile-test">
	  <delete verbose="${TALK}">
	    <fileset dir="${project.dir.classes}" includes="**/*.class" />
	  </delete>
	</target>	
	
	<target name="compile-test">
	  <mkdir dir="${project.dir.classes}"/>
	  <javac srcdir="${project.dir.tests}" destdir="${project.dir.classes}">
	    <classpath refid="classpath.test.compile"/>
	  </javac>
	</target>

	<target name="test" depends="compile-test">
		<junit showoutput="yes" fork="yes">
		  <classpath refid="classpath.test.execute" />
		  <formatter type="plain" usefile="false" />
		  <batchtest>
		      <fileset dir="${project.dir.classes}" includes="**/*Test.class" />
		  </batchtest>
		</junit>
	</target>
	
</project>
