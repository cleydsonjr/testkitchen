<project name="common_build" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property name="ant-build" value="${basedir}/../ant-build"/>
  <property file="build-local.properties"/>
  <property file="build.properties"/>
  <property file="${ant-build}/build-default.properties"/>
	
  <ivy:configure file="${ivysettings}"/>

  <target name="publish-local" description="places the built jar file into the local ivy repository.">
 	<delete file="${target.dir}/ivy.xml"/> <!-- delete last produced ivy file to be sure a new one will be generated -->
    <echo message="publishing to local ivy repository"/>
    <ivy:publish resolver="${resolver.local}" overwrite="true" forcedeliver="true" revision="${project.revision}" pubrevision="${project.revision}">
    	<artifacts pattern="${target.dir}/[artifact]-[revision].[ext]" />
    </ivy:publish>
  </target>

  <target name="publish" description="places the built jar file into the enterprise ivy repository.">
    <echo message="publishing to shared ivy repository"/>
    <ivy:publish resolver="${resolver.shared}" overwrite="true" forcedeliver="true" revision="${project.revision}"  pubrevision="${project.revision}">
    	<artifacts pattern="${target.dir}/[artifact]-[revision].[ext]" />
    </ivy:publish>
  </target>

  <target name="resolve" description="resolves dependencies into your ivy cache - only needs to be run upon initial checkout or when your ivy.xml changes">
  	    <!-- this target is named resolve even if we do a retrieve: 
  	         in fact a resolve will be called, and then the retrieve will simply copy files in the lib directory -->
  	<ivy:retrieve pattern="${lib.dir}/[artifact].[ext]" />
  </target>	
	
  <target name="clean-local" description="cleans the local repository for the current module">
  		<echo message="Deleting local module - ${ivy.local.default.root}/${ivy.organization}/${ivy.module}"/>
	    <delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}"/>
  </target>  

  <target name="clean" description="Cleans the solution">
		<delete dir="${build.dir}" failonerror="false"/>
  </target>

  <target name="dist-clean" description="Deletes the target preconfigured install dir" >
		<delete dir="${build.dir}" failonerror="false"/>
		<delete dir="${target.dir}" failonerror="false"/>
  </target>
	
  <target name="compile-default">
  		<ivy:cachepath pathid="classpath.compile" conf="compile" />
		<mkdir dir="${build.dir}"/>
		<javac srcdir="${src.dir}" destdir="${build.dir}"
			debug="${javac.debug}" debuglevel="lines,vars,source"
			source="${javac.version}" target="${javac.version}">
			<classpath refid="classpath.compile"/>
		</javac>
		<copy todir="${build.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
  </target>	

  <target name="jar-default" description="package a jar file" >
    <mkdir dir="${target.dir}"/>
    <mkdir dir="${jar.metainf.dir}"/>
    <!--condition property="have.jar.includes.resources">
      <equals arg1="${jar.includes.resources}" arg2="true"/>
    </condition>
    <antcall target="copy-resources-outdir"/-->

    <!--<antcall target="testGenerateVersionInfo"/>-->

    <property name="jarfile" value="${target.dir}/${ivy.module}-${project.revision}.jar"/>
    <echo message="building ${jarfile}"/>
    <jar jarfile="${jarfile}" basedir="${build.dir}">
      <metainf dir="${jar.metainf.dir}">
        <exclude name="MANIFEST.MF"/>
        <include name="**/**"/>
      </metainf>
      <manifest>
	      <attribute name="Built-By" value="${user.name}"/>
	      <attribute name="Built-On" value="${TODAY} ${TSTAMP}"/>
	      <attribute name="Product-Title" value="${prod.title}"/>
	      <attribute name="Major-Release" value="${version.major}"/>
	      <attribute name="Minor-Release" value="${version.minor}"/>
	      <attribute name="Patch-Release" value="${version.patch}"/>
	      <attribute name="Build-Number" value="${build.number}"/>
	      <attribute name="Product-Vendor" value="${prod.vendor}"/>
	      <attribute name="Product-Version" value="${version.major}.${version.minor}.${version.patch}"/>
	      <!--
	          Uncomment Main-Class and specify your package/Main class
	          if you are creating a jar file
	          and you would like to make it executable from the command line
	          with java -jar
	      -->
	      <!--<attribute name="Main-Class" value=""/>-->
	      <!--
	          Uncomment Class-Path if you are using java -jar with this jar file (above)
	          and you have other Jar files or classes you need on the classpath
	          for this one to boot ok.
	          (as an alternative to using -classpath argument to java)
	          Seperate entries using space
	      -->
	      <!--<attribute name="Class-Path" value=""/>-->
      </manifest>
    </jar>
  </target>	
	
  <target name="showClassPath" description="prints the resolved ivy classpath.">
    <pathconvert pathsep="${line.separator}|   |-- "
        property="echo.path.include"
        refid="include.classpath">
    </pathconvert>
    <pathconvert pathsep="${line.separator}|   |-- "
        property="echo.path.compile"
        refid="compile.classpath">
    </pathconvert>
    <pathconvert pathsep="${line.separator}|   |-- "
        property="echo.path.extlib"
        refid="extlib.classpath">
    </pathconvert>
    <pathconvert pathsep="${line.separator}|   |-- "
        property="echo.path.test"
        refid="test.classpath">
    </pathconvert>
    <echo message="|-- include classpath"/>
    <echo message="|   |"/>
    <echo message="|   |-- ${echo.path.include}"/>
    <echo message="|-- compile classpath"/>
    <echo message="|   |"/>
    <echo message="|   |-- ${echo.path.compile}"/>
    <echo message="|-- ext classpath"/>
    <echo message="|   |"/>
    <echo message="|   |-- ${echo.path.extlib}"/>
    <echo message="|-- test classpath"/>
    <echo message="|   |"/>
    <echo message="|   |-- ${echo.path.test}"/>
  </target>

  <macrodef name="propcop">
	<attribute name="name"/>
	<attribute name="from"/>
	<sequential>
	  <property name="@{name}" value="${@{from}}"/>
	</sequential>
  </macrodef>	
		
</project>